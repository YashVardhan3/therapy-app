openapi: 3.0.0
info:
  title: Therapy Management API
  description: API for managing therapy sessions, client records, therapist details, journals, and messages
  version: 1.0.0
paths:
  /auth/register:
    post:
      summary: Register a new client
      operationId: registerClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        201:
          description: Client successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
  
  /auth/registerTH:
    post:
      summary: Register a new therapist
      operationId: registerTherapist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Therapist'
      responses:
        201:
          description: Client successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'

  
  
  /auth/login:
    post:
      summary: Authenticate a user and generate JWT token
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: JWT token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  userDetails:
                    type: object
                    properties:
                      name:
                        type: string
                      role:
                        type: string
                      email:
                        type: string

  
  /clients/{email}:
    get:
      summary: Get client details by email
      security:
        - bearerAuth: []
      operationId: getClientByEmail
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      responses:
        200:
          description: Client details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        404:
          description: Client not found
    
    post:
      summary: Update client details
      security:
        - bearerAuth: []
      operationId: updateClient
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdateRequest'
      responses:
        200:
          description: Client details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        400:
          description: Invalid request
        404:
          description: Client not found
    
    put:
      summary: Update client important details (requires password for email change)
      security:
        - bearerAuth: []
      operationId: updateClientEmail
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailUpdateRequest'
      responses:
        200:
          description: Client details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        400:
          description: Invalid request
        404:
          description: Client not found
  
  /clients/delete:  
    post:
      summary: Delete a client account (requires password)
      security:
        - bearerAuth: []
      operationId: deleteClient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's current email
                password:
                  type: string
                  description: User's current password for verification
      responses:
        204:
          description: Client account deleted successfully
        400:
          description: Invalid password
        404:
          description: Client not found

  /mapping:
    post:
      summary: Map therapist to a client
      operationId: mapTherapistClient
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: string
                clientId:
                  type: string
      responses:
        200:
          description: Therapist successfully mapped to client
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Mapping successful"
        403:
          description: Access Denied
        500:
          description: Internal Server Error

    put:
      summary: Unmap therapist from a client
      operationId: unmapTherapistClient
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: string
                clientId:
                  type: string
      responses:
        200:
          description: Therapist successfully unmapped from client
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unmapping successful"
        403:
          description: Access Denied
        500:
          description: Internal Server Error


  /journals:
    post:
      summary: Create a new journal
      security:
        - bearerAuth: []
      
      operationId: createJournal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JournalRequest'
      responses:
        201:
          description: Journal successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'

  /journals/{journalUuid}:
    get:
      summary: Get journal by UUID
      security:
        - bearerAuth: []
      
      operationId: getJournal
      parameters:
        - in: path
          name: journalUuid
          required: true
          schema:
            type: string
      responses:
        200:
          description: Journal fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
    delete:
      summary: Delete journal by UUID
      security:
        - bearerAuth: []
      
      operationId: deleteJournal
      parameters:
        - in: path
          name: journalUuid
          required: true
          schema:
            type: string
      responses:
        204:
          description: Journal successfully deleted

  /journals/client/{clientEmail}:
    get:
      summary: Get all journals for a specific client email
      security:
        - bearerAuth: []
      
      operationId: getAllJournalsByClient
      parameters:
        - in: path
          name: clientEmail
          required: true
          schema:
            type: string
      responses:
        200:
          description: Journals fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'

  /journals/title/{title}:
    get:
      summary: Get all journals by title
      security:
        - bearerAuth: []
      
      operationId: getAllJournalsByTitle
      parameters:
        - in: path
          name: title
          required: true
          schema:
            type: string
      responses:
        200:
          description: Journals by title fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'

  /journals/accessible/{clientEmail}/{title}:
    get:
      summary: Find accessible journals by client email and title for Therapist
      security:
        - bearerAuth: []
      
      operationId: findAccessibleJournals
      parameters:
        - in: path
          name: clientEmail
          required: true
          schema:
            type: string
        - in: path
          name: title
          required: true
          schema:
            type: string
      responses:
        200:
          description: Accessible journals fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'

  /journals/add:
    post:
      summary: Add therapist to a journal
      security:
        - bearerAuth: []
      
      operationId: addTherapistToJournal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                journalId:
                  type: string
                  description: Journal ID
                therapistEmail:
                  type: string
                  description: Email of Therapist
      responses:
        200:
          description: Therapist successfully added to journal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'

    put:
      summary: Remove therapist from a journal
      security:
        - bearerAuth: []
      
      operationId: removeTherapistFromJournal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                journalId:
                  type: string
                  description: Journal ID
                therapistEmail:
                  type: string
                  description: Email of Therapist
      responses:
        200:
          description: Therapist successfully removed to journal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'

  /journals/emotion:
    post:
      summary: Add emotion to a journal
      security:
        - bearerAuth: []
      
      operationId: addEmotionToJournal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmotionRequest'
      responses:
        200:
          description: Emotion successfully added to journal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'

  /journals/search/{keyword}:
    get:
      summary: Search journals by keyword (title or content)
      security:
        - bearerAuth: []
      
      operationId: searchJournals
      parameters:
        - in: path
          name: keyword
          required: true
          schema:
            type: string
      responses:
        200:
          description: Journals searched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'

  /journals/search/accessible/{keyword}:
    get:
      summary: Search accessible journals by keyword (title or content)
      security:
        - bearerAuth: []
      
      operationId: searchAccessibleJournals
      parameters:
        - in: path
          name: keyword
          required: true
          schema:
            type: string
      responses:
        200:
          description: Accessible journals searched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'
                  
                  
                  
                  
                  
  /messages:
    post:
      summary: Create a new message
      security:
        - bearerAuth: []
      
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        201:
          description: Message successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        403:
          description: Forbidden

  /messages/sent/{senderId}:
    get:
      summary: Get messages sent by the current user
      security:
        - bearerAuth: []
      
      operationId: getMessagesSentByCurrentUser
      parameters:
        - in: path
          name: senderId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Messages sent by the current user fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        403:
          description: Forbidden

  /messages/received/{receiverId}:
    get:
      summary: Get messages received by the current user
      security:
        - bearerAuth: []
      
      operationId: getMessagesReceivedByCurrentUser
      parameters:
        - in: path
          name: receiverId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Messages received by the current user fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        403:
          description: Forbidden

  # /messages/conversation/{senderId}/{receiverId}:
  #   get:
  #     summary: Get messages between a specific sender and receiver
  #     security:
  #       - bearerAuth: []
      
  #     operationId: getMessagesBetweenSenderAndReceiver
  #     parameters:
  #       - in: path
  #         name: senderId
  #         required: true
  #         schema:
  #           type: string
  #       - in: path
  #         name: receiverId
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       200:
  #         description: Messages between the sender and receiver fetched successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Message'
  #       403:
  #         description: Forbidden

  /messages/conversation/{senderId}/{receiverId}:
    get:
      summary: Get the conversation of the current user with a specific sender and receiver
      security:
        - bearerAuth: []
      
      operationId: getConversationOfCurrentUser
      parameters:
        - in: path
          name: senderId
          required: true
          schema:
            type: string
        - in: path
          name: receiverId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Conversation of the current user fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        403:
          description: Forbidden

  /messages/all/{senderId}:
    get:
      summary: Get all messages of the current user
      security:
        - bearerAuth: []
      
      operationId: getAllMessagesOfCurrentUser
      parameters:
        - in: path
          name: senderId
          required: true
          schema:
            type: string
      responses:
        200:
          description: All messages of the current user fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        403:
          description: Forbidden

  /messages/{keyword}:
    get:
      summary: Search messages by a keyword
      security:
        - bearerAuth: []
      operationId: searchMessagesByKeyword
      parameters:
        - in: path
          name: keyword
          required: true
          schema:
            type: string
      responses:
        200:
          description: Messages searched by keyword successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        403:
          description: Forbidden
                
  
  /sessions:
    post:
      summary: Create a new session
      security:
        - bearerAuth: []
      
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '403':
          description: Access denied

  /sessions/public/open:
    get:
      summary: Get open sessions
      operationId: findOpenSessions
      responses:
        '200':
          description: List of open sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenSession'

  /sessions/client/{clientEmail}:
    get:
      summary: Get sessions by client email
      security:
        - bearerAuth: []
      
      operationId: findSessionByClientEmail
      parameters:
        - in: path
          name: clientEmail
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of sessions for the client
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '403':
          description: Access denied

  /sessions/therapist/{therapistEmail}:
    get:
      summary: Get sessions by therapist email
      security:
        - bearerAuth: []
      
      operationId: findSessionByTherapistEmail
      parameters:
        - in: path
          name: therapistEmail
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of sessions for the therapist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '403':
          description: Access denied

  /sessions/{clientEmail}/{therapistEmail}:
    get:
      summary: Get sessions by client and therapist
      security:
        - bearerAuth: []
      
      operationId: findSessionByClientAndTherapist
      parameters:
        - in: path
          name: clientEmail
          required: true
          schema:
            type: string
        - in: path
          name: therapistEmail
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of sessions for the client and therapist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '403':
          description: Access denied

  /sessions/add-client:
    post:
      summary: Add client to open session
      security:
        - bearerAuth: []
      
      operationId: addClientToOpenSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                  description: Session id of Session
                clientEmail:
                  type: string
                  description: Email of Client which wants to be added to session
      responses:
        '200':
          description: Updated session with client added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '403':
          description: Access denied

  /sessions/{sessionId}/notes/{clientEmail}:
    get:
      summary: Get shared notes for a session
      security:
        - bearerAuth: []
      
      operationId: getSharedNotes
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
        - in: path
          name: clientEmail
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Shared notes for the session
          content:
            application/json:
              schema:
                type: string
                example: "Session shared notes"
        '403':
          description: Access denied

  /sessions/{sessionId}/private-notes/{therapistEmail}:
    get:
      summary: Get private notes for a session
      security:
        - bearerAuth: []
      
      operationId: getPrivateNotes
      parameters:
        - in: path
          name: sessionId
          required: true
          schema:
            type: string
        - in: path
          name: therapistEmail
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Private notes for the session
          content:
            application/json:
              schema:
                type: string
                example: "Session private Notes"
        '403':
          description: Access denied

  /sessions/search/shared-notes/{clientEmail}/{searchText}:
    get:
      summary: Search shared notes for a client
      security:
        - bearerAuth: []
      
      operationId: searchSharedNotes
      parameters:
        - in: path
          name: clientEmail
          required: true
          schema:
            type: string
        - in: path
          name: searchText
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sessions with matching shared notes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '403':
          description: Access denied

  /sessions/search/notes/{therapistEmail}/{searchText}:
    get:
      summary: Search notes for a therapist
      security:
        - bearerAuth: []
      
      operationId: searchNotesForTherapist
      parameters:
        - in: path
          name: therapistEmail
          required: true
          schema:
            type: string
        - in: path
          name: searchText
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Sessions with matching notes for the therapist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '403':
          description: Access denied
                
  
  /therapists/public/save:
    post:
      summary: Save a new therapist
      operationId: saveTherapist1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Therapist'
      responses:
        '200':
          description: Therapist created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'

  /therapists/public/{email}:
    get:
      summary: Get therapist by email (public access)
      operationId: getTherapistByEmailforPublic
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Therapist information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'

  /therapists/public/all:
    get:
      summary: Get all therapists (public access)
      operationId: getAllTherapists
      responses:
        '200':
          description: List of all therapists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TherapistResponse'
  
  /therapist/{email}:
    get:
      summary: Get therapist details by email
      security:
        - bearerAuth: []
      operationId: getTherapistByEmail
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      responses:
        200:
          description: Therapist details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        404:
          description: Therapist not found
    
    post:
      summary: Update Therapist details
      security:
        - bearerAuth: []
      operationId: updateTherapist
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdateRequest'
      responses:
        200:
          description: Therapist details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        400:
          description: Invalid request
        404:
          description: Therapist not found
    
    put:
      summary: Update therapist important details (requires password for email change)
      security:
        - bearerAuth: []
      operationId: updateTherapistEmail
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailUpdateRequest'
      responses:
        200:
          description: Therapist details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        400:
          description: Invalid request
        404:
          description: Therapist not found
  
  /therapists/delete:  
    post:
      summary: Delete therapist account (requires password)
      security:
        - bearerAuth: []
      operationId: deleteTherapist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's current email
                password:
                  type: string
                  description: User's current password for verification
      responses:
        204:
          description: Therapist account deleted successfully
        400:
          description: Invalid password
        404:
          description: Therapist not found

  /therapists/add-client:
    post:
      summary: Add a client to a therapist's list
      security:
        - bearerAuth: []
      
      operationId: addClientToTherapist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistEmail:
                  type: string
                  format: email
                clientEmail:
                  type: string
                  format: email
                
      responses:
        '200':
          description: Therapist with added client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        '403':
          description: Access denied
    put:
      summary: Remove a client from a therapist's list
      security:
        - bearerAuth: []
      
      operationId: removeClientToTherapist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistEmail:
                  type: string
                  format: email
                clientEmail:
                  type: string
                  format: email
                
      responses:
        '200':
          description: Therapist with removed client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        '403':
          description: Access denied  

  /therapists/public/specialization/{specialization}:
    get:
      summary: Find therapists by specialization
      security:
        - bearerAuth: []
      
      operationId: findTherapistsBySpecialization
      parameters:
        - in: path
          name: specialization
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of therapists with the given specialization
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TherapistResponse'

  /therapists/public/available-slot/{slot}:
    get:
      summary: Find therapists available at a specific time slot
      operationId: findTherapistsByAvailableSlot
      security:
        - bearerAuth: []
      
      parameters:
        - in: path
          name: slot
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of therapists available at the given slot
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TherapistResponse'

  /therapists/update-specialization:
    put:
      summary: Update therapist specialization
      security:
        - bearerAuth: []
      
      operationId: updateSpecialization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                specialization:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Updated therapist with new specialization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        '403':
          description: Access denied

  /therapists/update-slots:
    put:
      summary: Update therapist available slots
      security:
        - bearerAuth: []
      
      operationId: updateAvailableSlots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                slots:
                  type: array
                  items:
                    type: string
                    format: date-time
              
      responses:
        '200':
          description: Updated therapist with new slots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        '403':
          description: Access denied

          
  /appointments:
    post:
      summary: Create a confirmed appointment
      operationId: createAppointment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                therapistId:
                  type: string
                appointmentDate:
                  type: string
                  format: date-time
                sessionId:
                  type: string
                  description: Optional session ID if linked
      responses:
        201:
          description: Appointment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  appointmentId:
                    type: string
        400:
          description: Bad request
        500:
          description: Internal Server Error

  /appointments/{appointmentId}:
    put:
      summary: Update an appointment
      operationId: updateAppointment
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentDate:
                  type: string
                  format: date-time
                status:
                  type: string
                  enum: [CONFIRMED, CANCELLED, COMPLETED]
      responses:
        200:
          description: Appointment updated successfully
        404:
          description: Appointment not found
        500:
          description: Internal Server Error
    
  
  
  
    get:
      summary: Get appointment by ID
      operationId: getAppointmentById
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Appointment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'      
        404:
          description: Appointment not found
        500:
          description: Internal Server Error

  /appointments/client/{clientId}:
    get:
      summary: Get all appointments for a client
      operationId: getAppointmentsByClient
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: clientId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of client's appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        500:
          description: Internal Server Error

  /appointments/therapist/{therapistId}:
    get:
      summary: Get all appointments for a therapist
      operationId: getAppointmentsByTherapist
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: therapistId
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of therapist's appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        500:
          description: Internal Server Error

  /requests/mapping:
    post:
      summary: Request therapist-client mapping by Therapist
      operationId: requestTherapistClientMapping
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: string
                clientId:
                  type: string
                message:
                  type: string
                  description: Optional message from the therapist
      responses:
        200:
          description: Mapping request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                  status:
                    type: string
                    example: "PENDING"
        403:
          description: Access Denied
        500:
          description: Internal Server Error
    
    put:
      summary: Approving therapist-client mapping
      operationId: approvingTherapistClientMapping
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                requestId:
                  type: string
                  description: Optional message from the therapist
      responses:
        200:
          description: Mapping request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Approved"
                  client:
                    $ref: '#/components/schemas/ClientResponse'
        403:
          description: Access Denied
        500:
          description: Internal Server Error
  
    
  /requests/journal-access:
    post:
      summary: Request access to a client's journal by Therapist
      operationId: requestJournalAccess
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: string
                journalId:
                  type: string
                clientId:
                  type: string
                message:
                  type: string
                  description: Explanation for access request
      responses:
        200:
          description: Journal access request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                  status:
                    type: string
                    example: "PENDING"
        403:
          description: Access Denied
        500:
          description: Internal Server Error
    
    put:
      summary: Approving journal access
      operationId: approvingJournalAccess
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                requestId:
                  type: string
                  description: Optional message from the therapist
      responses:
        200:
          description: Mapping request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Approved"
                  journal:
                    $ref: '#/components/schemas/Journal'
        403:
          description: Access Denied
        500:
          description: Internal Server Error
  
  
  /requests/appointment:
    post:
      summary: Request an appointment with a therapist
      operationId: requestAppointment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                therapistId:
                  type: string
                requestedDate:
                  type: string
                  format: date-time
                message:
                  type: string
                  description: Optional message from the client
      responses:
        200:
          description: Appointment request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                  status:
                    type: string
                    example: "PENDING"
        403:
          description: Access Denied
        500:
          description: Internal Server Error
    
    put:
      summary: Approving appointment
      operationId: approvingAppointment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: string
                requestId:
                  type: string
                  description: Optional message from the therapist
      responses:
        200:
          description: Mapping request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Approved"
                  appointment:
                    $ref: '#/components/schemas/Appointment'
        403:
          description: Access Denied
        500:
          description: Internal Server Error
  
    
  # /requests/{requestId}/approve:
  #   get:
  #     summary: Approve a request
  #     operationId: approveRequest
  #     security:
  #       - bearerAuth: []
  #     parameters:
  #       - in: path
  #         name: requestId
  #         required: true
  #         schema:
  #           type: string
  #     responses:
  #       200:
  #         description: Request approved successfully
  #       403:
  #         description: Access Denied
  #       500:
  #         description: Internal Server Error

  /requests/{requestId}/reject:
    get:
      summary: Reject a request
      operationId: rejectRequest
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: requestId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Request rejected successfully
        403:
          description: Access Denied
        500:
          description: Internal Server Error
  
                  

components:
  schemas:
    
    ClientUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        # Add other fields that are allowed for updates
    
    EmailUpdateRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        # Add other fields that are allowed for updates

  
  
  
    Client:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
        description:
          type: string
    ClientResponse:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        description:
          type: string
        therapists:
          type: array
          items:
            type: string
    
    
          
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Therapist:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
        specialization:
          type: array
          items:
            type: string
        availableSlots:
          type: array
          items:
            type: string
            format: date-time
        clients:
          type: array
          items:
            type: string
    
    TherapistResponse:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        specialization:
          type: array
          items:
            type: string
        availableSlots:
          type: array
          items:
            type: string
            format: date-time
        clients:
          type: array
          items:
            type: string
    
        
    Journal:
      type: object
      properties:
        journalUuid:
          type: string
        clientEmail:
          type: string
        title:
          type: string
        content:
          type: string
    
    JournalRequest:
      type: object
      properties:
        clientEmail:
          type: string
        title:
          type: string
        content:
          type: string
          
          
    EmotionRequest:
      type: object
      properties:
          journalId:
            type: integer
          
          emotion:
            type: object
            properties:
              name:
                type: string
              intensity:
                type: integer   
              timestamp:
                type: string
                format: date-time
    Message:
      type: object
      properties:
        messageId:
          type: string
        senderId:
          type: string
        receiverId:
          type: string
        content:
          type: string
        timestamp:
          type: string
          format: date-time        
    

    Appointment:
      type: object
      properties:
        appointmentId:
          type: string
          description: Unique identifier for the appointment
        clientId:
          type: string
          description: ID of the client
        therapistId:
          type: string
          description: ID of the therapist
        appointmentDate:
          type: string
          format: date-time
          description: Scheduled appointment date in ISO 8601 format (yyyy-MM-dd'T'HH:mm:ss'Z')
        status:
          type: string
          enum: [CONFIRMED, CANCELLED, COMPLETED]
          description: Status of the appointment
        sessionId:
          type: string
          nullable: true
          description: Optional session ID if the appointment is linked to a therapy session

    
    
    
    Session:
      type: object
      properties:
        id:
          type: string
        clientEmail:
          type: string
        therapistEmail:
          type: string
        isOpen:
          type: boolean
        sessionDate:
          type: string
          format: date-time
        privatenotes:
          type: string
        sharedNotes:
          type: string
      required:
        - id
        - therapistEmail
        - status
        - sessionDate
    
    SessionRequest:
      type: object
      properties:
        clientEmail:
          type: string
        therapistEmail:
          type: string
        isOpen:
          type: boolean
        sessionDate:
          type: string
          format: date-time
        privatenotes:
          type: string
        sharedNotes:
          type: string
      required:
        - id
        - therapistEmail
        - status
        - sessionDate
    
    
    OpenSession:
      type: object
      properties:
        id:
          type: string
        therapistEmail:
          type: string
        isOpen:
          type: boolean
        sessionDate:
          type: string
          format: date-time
        privatenotes:
          type: string
        sharedNotes:
          type: string
      required:
        - id
        - therapistEmail
        - status
        - sessionDate
    
        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT      
        