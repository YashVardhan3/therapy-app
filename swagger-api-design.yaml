openapi: 3.0.0
info:
  title: Therapy Management API
  description: API for managing therapy sessions, client records, therapist details, journals, and messages
  version: 1.0.0
paths:
  /auth/register:
    post:
      summary: Register a new client or Therapist based on the role in request Body
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User successfully created
        400: 
          description: Email already in use
  
  /auth/login:
    post:
      summary: Authenticate a user and generate JWT token
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          description: JWT token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  userDetails:
                    type: object
                    properties:
                      name:
                        type: string
                      role:
                        type: string
                      email:
                        type: string
        400:
          description: Invalid Email or Password
        
  /user/get:
    get:
      summary: Get user details by userId
      security:
        - bearerAuth: []
      operationId: getUserByUserId
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: Client details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        404:
          description: Client not found
    
    put:
      summary: Update user details
      security:
        - bearerAuth: []
      operationId: updateUser
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
      responses:
        200:
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        400:
          description: Invalid request
        404:
          description: User not found
  
  /user/delete:  
    post:
      summary: Delete a user account (requires password)
      security:
        - bearerAuth: []
      operationId: deleteUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's current email
                password:
                  type: string
                  description: User's current password for verification
      responses:
        204:
          description: User account deleted successfully
        400:
          description: Invalid password
        404:
          description: User not found

  /mapping:
    post:
      summary: Modify therapist-client mapping
      operationId: modifyTherapistClientMapping
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: string
                clientId:
                  type: string
                action:
                  type: string
                  enum: [MAP, UNMAP]
      responses:
        200:
          description: Mapping successfully modified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Mapping modified successfully"
        403:
          description: Access Denied
        500:
          description: Internal Server Error

  /journals:
    post:
      summary: Create or update a journal
      security:
        - bearerAuth: []
      operationId: createOrUpdateJournal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JournalRequest'
      responses:
        201:
          description: Journal successfully created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
    get:
      summary: Retrieve journals with optional filters
      security:
        - bearerAuth: []
      operationId: getJournals
      parameters:
        - in: query
          name: journalUuid
          required: false
          schema:
            type: string
        - in: query
          name: clientId
          required: false
          schema:
            type: string
        - in: query
          name: keyword
          required: false
          schema:
            type: string
      responses:
        200:
          description: Journals retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Journal'
    delete:
      summary: Delete a journal
      security:
        - bearerAuth: []
      operationId: deleteJournal
      parameters:
        - in: query
          name: journalUuid
          required: true
          schema:
            type: string
      responses:
        204:
          description: Journal successfully deleted

  /journals/manage-therapist:
    post:
      summary: Add or remove a therapist from a journal
      security:
        - bearerAuth: []
      operationId: modifyJournalTherapist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                journalId:
                  type: string
                therapistId:
                  type: string
                action:
                  type: string
                  enum: [ADD, REMOVE]
      responses:
        200:
          description: Journal-therapist mapping updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'

  /journals/emotion:
    post:
      summary: Add emotion to a journal
      security:
        - bearerAuth: []
      operationId: addEmotionToJournal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmotionRequest'
      responses:
        200:
          description: Emotion successfully added to journal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'

  /messages:
    post:
      summary: Create a new message
      security:
        - bearerAuth: []
      
      operationId: createMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        201:
          description: Message successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        403:
          description: Forbidden

  /messages/conversation:
    get:
      summary: Get the conversation of the current user with a specific sender and receiver
      security:
        - bearerAuth: []
      
      operationId: getConversationOfCurrentUser
      parameters:
        - in: query
          name: conversationKey
          required: true
          schema:
            type: string
      responses:
        200:
          description: Conversation of the current user fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        403:
          description: Forbidden

  /messages/all/{senderId}:
    get:
      summary: Get all messages of the current user
      security:
        - bearerAuth: []
      
      operationId: getAllMessagesOfCurrentUser
      parameters:
        - in: path
          name: senderId
          required: true
          schema:
            type: string
      responses:
        200:
          description: All messages of the current user fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        403:
          description: Forbidden

  /messages/{keyword}:
    get:
      summary: Search messages by a keyword
      security:
        - bearerAuth: []
      operationId: searchMessagesByKeyword
      parameters:
        - in: path
          name: keyword
          required: true
          schema:
            type: string
      responses:
        200:
          description: Messages searched by keyword successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        403:
          description: Forbidden
                
  
  /sessions:
    post:
      summary: Create a new session
      security:
        - bearerAuth: []
      
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '200':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '403':
          description: Access denied
          
          
    get:
      summary: Retrieve sessions with optional filters
      security:
        - bearerAuth: []
      operationId: getSessions
      parameters:
        - in: query
          name: userId
          required: false
          schema:
            type: string
        - in: query
          name: isOpen
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: List of sessions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        403:
          description: Access denied
    put:
      summary: Add client to session
      security:
        - bearerAuth: []
      operationId: modifySession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                clientId:
                  type: string
      responses:
        200:
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        403:
          description: Access denied
      

  /sessions/public:
    get:
      summary: Get open sessions
      operationId: findOpenSessions
      responses:
        '200':
          description: List of open sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenSession'

  /sessions/notes:
    post:
      summary: Retrieve or search session notes according to the role of user
      security:
        - bearerAuth: []
      
      operationId: getOrSearchNotes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  type: string
                userId:
                  type: string
                userRole:
                  type: string
                keyword:
                  type: string
      responses:
        '200':
          description: Notes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Session'
        '403':
          description: Access denied

  
  /therapists/public:
    get:
      summary: Get all therapists (public access)
      operationId: getAllTherapists
      responses:
        '200':
          description: List of all therapists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TherapistResponse'
  
  # /therapists:
  #   get:
  #     summary: Retrieve therapists with optional filters
  #     operationId: getTherapists
  #     parameters:
  #       - in: query
  #         name: specialization
  #         required: false
  #         schema:
  #           type: string
  #       - in: query
  #         name: availableSlot
  #         required: false
  #         schema:
  #           type: string
  #           format: date-time
  #     responses:
  #       200:
  #         description: List of therapists retrieved successfully
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/TherapistResponse'
                  
  /therapists/update:
    post:
      summary: Add or remove a client from a therapist's list
      security:
        - bearerAuth: []
      operationId: modifyTherapistClientList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: string
                clientId:
                  type: string
                action:
                  type: string
                  enum: [ADD, REMOVE]
      responses:
        200:
          description: Therapist-client relationship modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        403:
          description: Access denied
    
    put:
      summary: Update therapist specialization or Slot
      security:
        - bearerAuth: []
      
      operationId: updateSpecialization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                therapistId:
                  type: string
                specialization:
                  type: array
                  items:
                    type: string
                slots:
                  type: array
                  items:
                    type: string
                    format: date-time
                  
      responses:
        '200':
          description: Updated therapist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TherapistResponse'
        '403':
          description: Access denied

  /appointments:
    post:
      summary: Create an appointment
      security:
        - bearerAuth: []
      operationId: createAppointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentRequest'
      responses:
        201:
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        400:
          description: Bad request
        500:
          description: Internal Server Error
    get:
      summary: Retrieve appointments with filters
      security:
        - bearerAuth: []
      operationId: getAppointments
      parameters:
        - in: query
          name: appointmentId
          required: false
          schema:
            type: string
        - in: query
          name: clientId
          required: false
          schema:
            type: string
        - in: query
          name: therapistId
          required: false
          schema:
            type: string
      responses:
        200:
          description: Appointments retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        500:
          description: Internal Server Error
    put:
      summary: Update an appointment
      security:
        - bearerAuth: []
      operationId: updateAppointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentId:
                  type: string
                appointmentDate:
                  type: string
                  format: date-time
                status:
                  type: string
                  enum: [CONFIRMED, CANCELLED, COMPLETED]
      responses:
        200:
          description: Appointment updated successfully
        404:
          description: Appointment not found
        500:
          description: Internal Server Error

  /therapist-requests:
    post:
      summary: Create a therapist request (Mapping or Journal Access)
      operationId: createTherapistRequest
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [MAPPING, JOURNAL_ACCESS]
                therapistId:
                  type: string
                clientId:
                  type: string
                journalId:
                  type: string
                  nullable: true
                message:
                  type: string
      responses:
        200:
          description: Request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                  status:
                    type: string
                    example: "PENDING"
        403:
          description: Access Denied
        500:
          description: Internal Server Error
    get:
      summary: Retrieve therapist requests with optional filters
      security:
        - bearerAuth: []
      operationId: getTherapistRequests
      parameters:
        - in: query
          name: therapistId
          required: false
          schema:
            type: string
        - in: query
          name: clientId
          required: false
          schema:
            type: string
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [PENDING, APPROVED, REJECTED]
      responses:
        200:
          description: Requests retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TherapistRequest'
        403:
          description: Access Denied
    put:
      summary: Approve or reject a therapist request
      security:
        - bearerAuth: []
      operationId: updateTherapistRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestId:
                  type: string
                status:
                  type: string
                  enum: [APPROVED, REJECTED]
      responses:
        200:
          description: Request updated successfully
        403:
          description: Access Denied

  /client-requests:
    post:
      summary: Request an appointment
      operationId: createClientRequest
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                therapistId:
                  type: string
                requestedDate:
                  type: string
                  format: date-time
                message:
                  type: string
      responses:
        200:
          description: Appointment request sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                  status:
                    type: string
                    example: "PENDING"
        403:
          description: Access Denied
        500:
          description: Internal Server Error
    get:
      summary: Retrieve client appointment requests with optional filters
      security:
        - bearerAuth: []
      operationId: getClientRequests
      parameters:
        - in: query
          name: clientId
          required: false
          schema:
            type: string
        - in: query
          name: therapistId
          required: false
          schema:
            type: string
        - in: query
          name: status
          required: false
          schema:
            type: string
            enum: [PENDING, APPROVED, REJECTED]
      responses:
        200:
          description: Requests retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientRequest'
        403:
          description: Access Denied
    put:
      summary: Approve or reject an appointment request
      security:
        - bearerAuth: []
      operationId: updateClientRequest
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestId:
                  type: string
                status:
                  type: string
                  enum: [APPROVED, REJECTED]
      responses:
        200:
          description: Request updated successfully
        403:
          description: Access Denied

components:
  schemas:
    UserResponse:
      type: object
      properties:
        userId:
          type: string
        name:
          type: string
        role:
          type: string
    UserUpdateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
        description:
          type: string
        role:
          type: string
          example: 'client'
    ClientResponse:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        description:
          type: string
        therapists:
          type: array
          items:
            type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    
    TherapistResponse:
      type: object
      properties:
        therapistId:
          type: string
        name:
          type: string
        specialization:
          type: array
          items:
            type: string
        availableSlots:
          type: array
          items:
            type: string
            format: date-time
    Journal:
      type: object
      properties:
        journalUuid:
          type: string
        clientEmail:
          type: string
        title:
          type: string
        content:
          type: string
    JournalRequest:
      type: object
      properties:
        clientEmail:
          type: string
        title:
          type: string
        content:
          type: string
    EmotionRequest:
      type: object
      properties:
          journalId:
            type: integer
          
          emotion:
            type: object
            properties:
              name:
                type: string
              intensity:
                type: integer   
              timestamp:
                type: string
                format: date-time
    Message:
      type: object
      properties:
        conversationKey:
          type: string
        senderId:
          type: string
        receiverId:
          type: string
        content:
          type: string
        timestamp:
          type: string
          format: date-time        
    Appointment:
      type: object
      properties:
        appointmentId:
          type: string
        clientId:
          type: string
        therapistId:
          type: string
        appointmentDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [CONFIRMED, CANCELLED, COMPLETED]
        sessionId:
          type: string
          nullable: true
    AppointmentRequest:
      type: object
      properties:
        clientId:
          type: string
        therapistId:
          type: string
        appointmentDate:
          type: string
          format: date-time
        sessionId:
          type: string
          nullable: true
    Session:
      type: object
      properties:
        id:
          type: string
        clientEmail:
          type: string
        therapistEmail:
          type: string
        isOpen:
          type: boolean
        sessionDate:
          type: string
          format: date-time
        privatenotes:
          type: string
        sharedNotes:
          type: string
      required:
        - id
        - therapistEmail
        - status
        - sessionDate
    SessionRequest:
      type: object
      properties:
        clientEmail:
          type: string
        therapistEmail:
          type: string
        isOpen:
          type: boolean
        sessionDate:
          type: string
          format: date-time
        privatenotes:
          type: string
        sharedNotes:
          type: string
      required:
        - id
        - therapistEmail
        - status
        - sessionDate
    TherapistRequest:
      type: object
      properties:
        requestId:
          type: string
        type:
          type: string
          enum: [MAPPING, JOURNAL_ACCESS]
        therapistId:
          type: string
        clientId:
          type: string
        journalId:
          type: string
          nullable: true
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
    ClientRequest:
      type: object
      properties:
        requestId:
          type: string
        type:
          type: string
          enum: [APPOINTMENT]
        clientId:
          type: string
        therapistId:
          type: string
        requestedDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
    OpenSession:
      type: object
      properties:


        id:
          type: string
        therapistEmail:
          type: string
        isOpen:
          type: boolean
        sessionDate:
          type: string
          format: date-time
        privatenotes:
          type: string
        sharedNotes:
          type: string
      required:
        - id
        - therapistEmail
        - status
        - sessionDate
    
        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT      
        